-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

module(...)

function physicsData(scale)
	local physics = { data =
	{ 
		
		["Hajo"] = {
			
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   64, 130  ,  97, 130  ,  94, 161  ,  68, 162  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   4, 162  ,  0, 119  ,  4, 100  ,  31, 100  ,  38, 141  ,  30, 162  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   31, 100  ,  51, 130  ,  38, 141  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   131, 162  ,  130, 99  ,  156, 100  ,  160, 112  ,  160, 150  ,  157, 162  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   28, 66  ,  37, 66  ,  37, 88  ,  28, 90  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   132, 90  ,  124, 89  ,  37, 66  ,  132, 66  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   98, 6  ,  108, 17  ,  118, 40  ,  37, 66  ,  42, 38  ,  53, 16  ,  64, 5  ,  85, 0  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   31, 100  ,  37, 95  ,  97, 130  ,  51, 130  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   123, 66  ,  37, 66  ,  118, 40  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   124, 89  ,  123, 95  ,  110, 130  ,  97, 130  ,  37, 95  ,  37, 66  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   131, 162  ,  128, 151  ,  123, 95  ,  130, 99  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   118, 136  ,  123, 95  ,  128, 151  }
				}  ,
				{
					density = 2, friction = 0, bounce = 0, 
					filter = { categoryBits = 1, maskBits = 65535 },
					shape = {   110, 130  ,  123, 95  ,  118, 136  }
				}  
		}
		
	} }

	-- apply scale factor
	local s = scale or 1.0
	for bi,body in pairs(physics.data) do
		for fi,fixture in ipairs(body) do
			for ci,coordinate in ipairs(fixture.shape) do
				fixture.shape[ci] = s * coordinate
			end
		end
	end
	
	function physics:get(name)
		return unpack(self.data[name])
	end
	
	return physics;
end


